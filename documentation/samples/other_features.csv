" :{          "," .              ","          ","            ","              ","         "," "," // Other features not covered in  "
"             ","                ","          ","            ","              ","         "," "," // ""JMON by Example""            "
"             ","                ","          ","            ","              ","         "," ","                                   "
" .transpose  "," :{             "," .        ","            ","              ","         "," ","                                   "
"             "," .normal_obj    "," :{       "," .a         "," .b           ","         "," "," // '^' is the tranpose operator   "
"             ","                "," .A       "," I'm A.a    "," I'm A.b      ","         "," "," // it causes a matrix to be       "
"             ","                "," .B       "," I'm B.a    "," I'm B.b      ","         "," "," // evaluated in a column-major    "
"             "," .tposed_obj    "," :^{      "," .a         "," .b           ","         "," "," // (rather than row-major)        "
"             ","                "," .A       "," I'm a.A    "," I'm b.A      ","         "," "," // order.                         "
"             ","                "," .B       "," I'm a.B    "," I'm b.B      ","         "," ","                                   "
"             "," .normal_arr    "," :[       "," .+         "," .+           ","         "," ","                                   "
"             ","                "," .+       "," I'm [0][0] "," I'm [0][1]   ","         "," ","                                   "
"             ","                "," .+       "," I'm [1][0] "," I'm [1][1]   ","         "," ","                                   "
"             "," .tposed_arr    "," :^[      "," .+         "," .+           ","         "," ","                                   "
"             ","                "," .+       "," I'm [0][0] "," I'm [1][0]   ","         "," ","                                   "
"             ","                "," .+       "," I'm [0][1] "," I'm [1][1]   ","         "," ","                                   "
"             "," .tpose_nesting "," :^{      "," .nested    ","              ","         "," "," // Nested matrices do not inherit "
"             ","                "," .        "," :{         "," .b           ","         "," "," // the tranposedness of their     "
"             ","                ","          "," .a         "," I'm a.b      ","         "," "," // parent.                        "
"             ","                ","          ","            ","              ","         "," ","                                   "
" .whitespace "," :{             "," .        ","            ","              ","         "," "," // It is fine to have blank       "
"             "," .example_1     "," :{       ","            ","              ","         "," "," // cells between a matrix header  "
"             ","                ","          ","            ","              "," .b      "," "," // and its row paths/columns.     "
"             ","                ","          ","            ","              ","         "," ","                                   "
"             ","                ","          "," .a         ","              "," I'm a.b "," ","                                   "
"             "," .example_2     "," :{       "," .b         ","              ","         "," "," // You can also have blank        "
"             ","                "," .a       ","            ","              ","         "," "," // cells left of and above        "
"             ","                ","          ","            ","              "," I'm a.b "," "," // where a value is declared.     "
"             ","                ","          ","            ","              ","         "," ","                                   "
"             "," .example_3     "," :{       ","   .b       ","              ","         "," "," // Leading/trailing whitespace is "
"             ","                ","   .a     ","   I'm a.b  ","              ","         "," "," // trimmed.                       "
"             ","                ","          ","            ","              ","         "," ","                                   "
" .json_lit   "," :{             "," .        ","            ","              ","         "," "," // JSON literals can optionally   "
"             "," .single_quote  "," ::'a'    ","            ","              ","         "," "," // use single quotes instead of   "
"             "," .double_quote  "," :::""a"" ","            ","              ","         "," "," // double quotes.                 "
"             ","                ","          ","            ","              ","         "," ","                                   "
"             "," .add_each_to   "," :{       "," .b         "," .+*          ","         "," "," // The Add-Each-To operator       "
"             ","                "," .obj     "," B!         "," ::{'c':'C!'} ","         "," "," // works with JSON literals.      "
"             ","                ","          ","            ","              ","         "," ","                                   "
" .paths      "," :{             "," .        ","            ","              ","         "," ","                                   "
"             "," . spaced .item "," ::1      ","            ","              ","         "," "," // An element in a path may have  "
"             ","                ","          ","            ","              ","         "," "," // whitespace before/after the    "
"             ","                ","          ","            ","              ","         "," "," // dots that separate them.       "
"             ","                ","          ","            ","              ","         "," ","                                   "
"             "," .' a '.b       "," ::1      ","            ","              ","         "," "," // Path elements may be quoted.   "
"             "," .'a""\t'.b     "," ::1      ","            ","              ","         "," "," // JMON parses these as           "
"             "," ."" b "".b     "," ::1      ","            ","              ","         "," "," // JSON strings.                  "
"             "," .""b'\t"".b    "," ::1      ","            ","              ","         "," ","                                   "
